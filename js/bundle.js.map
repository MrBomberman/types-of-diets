{"version":3,"sources":["webpack://project2/./js/modules/calculator.js","webpack://project2/./js/modules/cards.js","webpack://project2/./js/modules/forms.js","webpack://project2/./js/modules/modalWindow.js","webpack://project2/./js/modules/slider.js","webpack://project2/./js/modules/tabs.js","webpack://project2/./js/modules/timer.js","webpack://project2/webpack/bootstrap","webpack://project2/./js/script.js"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;;AAEA,2EAA2E;;AAE3E,4CAA4C;;AAE5C,0CAA0C;AAC1C,8CAA8C;;AAE9C,SAAS;AACT,2BAA2B;AAC3B,kDAAkD;AAClD;;AAEA,4CAA4C;AAC5C,kDAAkD;;AAElD,SAAS;AACT,0BAA0B;AAC1B,iDAAiD;AACjD;;AAEA,0DAA0D;AAC1D;;AAEA;AACA;AACA,6EAA6E;AAC7E;AACA;;AAEA;AACA,uFAAuF;AACvF;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;;;AAGA,6BAA6B;AAC7B,6DAA6D;AAC7D;AACA,uBAAuB;AACvB;;AAEA;AACA;AACA,aAAa;AACb;AACA;;AAEA;;AAEA;;AAEA;AACA,iEAAiE;;AAEjE;AACA,0DAA0D;AAC1D,6DAA6D;AAC7D,qEAAqE;AACrE,2FAA2F;AAC3F;AACA,qBAAqB,OAAO;AAC5B,0DAA0D;AAC1D;AACA;;;AAGA;AACA;AACA,qBAAqB;;AAErB,wDAAwD;AACxD;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,wFAAwF;AACxF,4DAA4D;AAC5D,oEAAoE;AACpE,oBAAoB,OAAO;AAC3B,yDAAyD;AACzD;;;AAGA;AACA;AACA,oBAAoB;;AAEpB,uDAAuD;AACvD;AACA,gBAAgB;;;AAGhB,+EAA+E;AAC/E,gGAAgG;;;AAGhG,iDAAiD;AACjD;;AAEA,kDAAkD;;AAElD,8CAA8C;AAC9C,yDAAyD;AACzD,iBAAiB;AACjB,gDAAgD;AAChD;;AAEA,kDAAkD;AAClD;AACA,8CAA8C;AAC9C,8BAA8B;AAC9B;AACA,8CAA8C;AAC9C;AACA;AACA,2CAA2C;AAC3C;AACA;;AAEA;AACA,aAAa;;AAEb;;AAEA;AACA;AACA;AACA;;AAEA,4B;;;;;;;;;;AC3IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA,aAAa;AACb;AACA,qDAAqD;AACrD,iBAAiB;AACjB;AACA;AACA,+BAA+B,SAAS,OAAO,SAAS;AACxD,sDAAsD,WAAW;AACjE,oDAAoD,WAAW;AAC/D;AACA;AACA;AACA,8DAA8D,WAAW;AACzE;AACA;AACA,wCAAwC;AACxC;AACA;;AAEA,wCAAwC;AACxC;AACA,sBAAsB;AACtB,8CAA8C,IAAI,YAAY,WAAW,GAAG;AAC5E,SAAS;;AAET;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB;AACA,gBAAgB;AAChB,YAAY;;AAEZ;AACA,uBAAuB;AACvB,2BAA2B,gCAAgC,MAAM;AACjE,2FAA2F;AAC3F,aAAa,EAAE;AACf,SAAS;;AAET;AACA;AACA;;AAEA,iCAAiC;AACjC,0BAA0B,gCAAgC,MAAM;AAChE;;AAEA;;AAEA;AACA,0BAA0B,IAAI,OAAO,OAAO;AAC5C,iDAAiD,MAAM;AACvD,+CAA+C,MAAM;AACrD;AACA;AACA;AACA,yDAAyD,MAAM;AAC/D;AACA;;AAEA;AACA,YAAY;AACZ;;;AAGA;AACA,oEAAoE;AACpE;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA,uEAAuE;AACvE,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAA6F;AAC7F;AACA;AACA;;AAEA,uB;;;;;;;;;;AC1JA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,SAAS;AACT;AACA;AACA,+CAA+C;AAC/C,0CAA0C;AAC1C;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;;AAEb,oCAAoC;AACpC,UAAU;;;;AAIV,qCAAqC;AACrC,oDAAoD;AACpD,mCAAmC;;AAEnC,oEAAoE;AACpE,oDAAoD;AACpD;AACA;AACA;AACA,kBAAkB;AAClB;AACA,8CAA8C;AAC9C,sEAAsE;AACtE;;;AAG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","file":"bundle.js","sourcesContent":["function calculator(){\n        // calculator\n\n        const result = document.querySelector('.calculating__result span'); // берем класс и его внутренний спен\n\n        let sex, height, weight, age, ratio; // создаем 5 нужных элементов\n    \n        if (localStorage.getItem('sex')) { // проверяем наличие в локальном хранилище ключа sex\n            sex = localStorage.getItem('sex'); // обращаемся чтобы получить уже имеющиеся значение\n    \n        } else {\n            sex = 'female'; // если в локальном хранилище пусто, задаем дефолтное значение\n            localStorage.setItem('sex', 'female'); // помещаем в локальное хранилище\n        }\n    \n        if (localStorage.getItem('ratio')) { // проверяем наличие в локальном хранилище ключа ratio\n            ratio = localStorage.getItem('ratio'); // обращаемся чтобы получить уже имеющиеся значение\n    \n        } else {\n            ratio = 1.375; // если в локальном хранилище пусто, задаем дефолтное значение\n            localStorage.setItem('ratio', 1.375); // помещаем в локальное хранилище\n        }\n    \n        function initLocalSettings(selector, activeClass){ // создаем функцию для задавания классов актиности калькулятору, взаимодействую с локальным хранилищем\n            const elements = document.querySelectorAll(selector);\n    \n            elements.forEach(elem => {\n                elem.classList.remove(activeClass);\n                if (elem.getAttribute('id') === localStorage.getItem('sex')){ // сравниваем id перебираемого элемента со значением ключа в локальном хранилище\n                    // если значение id будет равно значению ключа из хранилища\n                    elem.classList.add(activeClass);\n    \n                }\n                if (elem.getAttribute('data-ratio') === localStorage.getItem('ratio')){ // сравниваем data атрибут перебираемого элемента со \n                    // значением ключа в локальном хранилище\n                    // если значение data-ratio будет равно значению ключа из хранилища - задаем класс активности на этот элемент\n                    elem.classList.add(activeClass);\n                }\n            });\n        }\n    \n        initLocalSettings('#gender div','calculating__choose-item_active');\n        initLocalSettings('.calculating__choose_big div', 'calculating__choose-item_active');\n    \n    \n        function calcTotal(){ // будем запускать каждый раз, когда выполняется какое-то изменение\n            if (!sex || !height ||!weight || !age || !ratio){ // если у нас нет хотя бы одного компонента, будет хотя бы один false\n                result.textContent = '____';\n                return; // досрочно прерываем функцию\n            }\n    \n            if (sex === 'female'){\n                result.textContent = Math.round((447.6 + (9.2 * weight) + (3.1 * height) - (4.3 * age)) * ratio);\n            } else {\n                result.textContent = Math.round((88.36 + (13.4 * weight) + (4.8 * height) - (5.7 * age)) * ratio);\n            }\n            \n        }\n    \n        calcTotal();\n    \n        function getStaticInformation(selector, activeClass) {\n            const elements = document.querySelectorAll(selector); // внутри этого родителя будем получать все дивы\n            \n            elements.forEach(element => {\n                element.addEventListener('click', (e) => { // задаем событие каждому элементу, на который кликнули\n                    if (e.target.getAttribute('data-ratio')){ // объект события, проверяем наличие атрибута\n                        ratio = +e.target.getAttribute('data-ratio'); // если атрибут есть, засовываем его значение в ratio\n                        localStorage.setItem('ratio',+e.target.getAttribute('data-ratio')); // добавляем в локальное хранилище\n                        // наш статус активности\n                    } else { // или если кликнули не в атрибут, значит кликнули в пол человека\n                        sex = e.target.getAttribute('id'); // получаем значение идентификатора\n                        localStorage.setItem('sex',e.target.getAttribute('id'));\n                    }\n        \n        \n                    elements.forEach(item => {\n                        item.classList.remove(activeClass);\n                    });\n        \n                    e.target.classList.add(activeClass);  // тот объект, в который кликнули назначаем класс активности\n                    calcTotal();\n                });\n            });\n        }\n            // document.querySelector(parentSelector).addEventListener('click', (e) => { // будем указывать, куда нажали в родителе\n            //     if (e.target.getAttribute('data-ratio')){ // объект события, проверяем наличие атрибута\n            //         ratio = +e.target.getAttribute('data-ratio'); // если атрибут есть, засовываем его значение в ratio\n            //     } else { // или если кликнули не в атрибут, значит кликнули в пол человека\n            //         sex = e.target.getAttribute('id'); // получаем значение идентификатора\n            //     }\n    \n    \n            //     elements.forEach(item => {\n            //         item.classList.remove(activeClass);\n            //     });\n    \n            //     e.target.classList.add(activeClass);  // тот объект, в который кликнули назначаем класс активности\n            //     calcTotal();\n            // });\n    \n    \n        getStaticInformation('#gender div', 'calculating__choose-item_active'); // передаем кусок кода с полом человека\n        getStaticInformation('.calculating__choose_big div', 'calculating__choose-item_active'); // часть кода с уровнем подготовки человека\n    \n    \n        function getDynamicInformation(selector){ // берем селектор инпута, который нас интересует\n            const input = document.querySelector(selector);\n    \n            input.addEventListener('input', ()=> { // задаем событие ввода в какой-то конкретный элемент\n                \n                if (input.value.match(/\\D/g)){ // при помощи регулярного выражения проверяем отсутсвие цифр\n                    input.style.border = '1px solid red'; // если в инпуте присутствуют цифры, необходимо раскрасить границу\n                } else {\n                    input.style.border = 'none'; // если пользователь исправляет, мпняем на исходную позицию\n                }\n                \n                switch(input.getAttribute('id')) { // проверяем строку, в которую вводим, ее id\n                    case 'height': // если человек вводит в графу роста(значение id = 'height')\n                        height = +input.value; //  записываем в переменную роста информацию, которую ввели\n                        break; // останавливаем после записи\n                    case 'weight': // если вводим в графу веса(значение id = 'weight')\n                        weight = +input.value; // записываем в переменную веса информацию, которую ввели\n                        break;\n                    case 'age': // если вводим в графу возраста(значение id ='age')\n                        age = +input.value; // записываем в переменную возраста\n                        break;\n                    }\n    \n                    calcTotal();\n            });\n    \n        }\n    \n        getDynamicInformation('#height');\n        getDynamicInformation('#weight');\n        getDynamicInformation('#age');\n}\n\nmodule.exports = calculator;","function cards() {\n    class MenuCard {\n        constructor(src, alt, title, descr, price, parentSelector, ...classes) {\n            this.src = src;\n            this.alt = alt;\n            this.title = title;\n            this.descr = descr;\n            this.price = price;\n            this.classes = classes;\n            this.parent = document.querySelector(parentSelector);\n            this.transfer = 90;\n            this.changeToUAH();\n        }\n\n        changeToUAH() {\n            this.price = this.price * this.transfer;\n        }\n\n        render() {\n            const element = document.createElement('div');\n            if (this.classes.length === 0) { // проверям на наличие классов, если их нет, ставим дефолтный\n                this.element = 'menu__item';\n                element.classList.add(this.element);\n            } else {\n                this.classes.forEach(className => {\n                    element.classList.add(className); // для передачи каких-либо классов нашему созданному элементу\n                });\n            }\n            element.innerHTML = `\n                    <img src=${this.src} alt=${this.alt}>\n                    <h3 class=\"menu__item-subtitle\">${this.title}</h3>\n                    <div class=\"menu__item-descr\">${this.descr}</div>\n                    <div class=\"menu__item-divider\"></div>\n                    <div class=\"menu__item-price\">\n                        <div class=\"menu__item-cost\">Цена:</div>\n                        <div class=\"menu__item-total\"><span>${this.price}</span> руб/день</div>\n                    </div>\n            `;\n            this.parent.append(element); // просто в родителя добавляем наш элемент в конец\n        }\n    }\n\n    const getResource = async (url) => { // будем получать данные с свервера, get запрос, данные для постинга уже не нужны\n        const res = await fetch(url);\n        if (!res.ok) { // если пошло что-то не так\n            throw new Error(`Couldn't fetch ${url}, status: ${res.status}`); // создаем объект ошибки и выкидываем\n        } // помогает обнаружить ошики в операции fetch или проблемах на сайте\n\n        return await res.json();\n    };\n\n\n    // axios.get('http://localhost:3000/menu')\n    //     .then(data => {\n    //         data.data.forEach(({\n    //             img,\n    //             altimg,\n    //             title,\n    //             descr,\n    //             price\n    //         }) => { // data.data потому что обращаемся именно к тем данным, которые получили\n    //             new MenuCard(img, altimg, title, descr, price, '.menu .container').render();\n    //         });\n    //     });\n\n    getResource('http://localhost:3000/menu') // запрос ушел, необходима обработка\n        .then(data => { // получаем массив с объектами\n            data.forEach(({img,altimg, title, descr, price}) => { // вытаскиваем каждое свойство из данного объекта\n                new MenuCard(img,altimg, title, descr, price, '.menu .container').render(); // конструктор будет создаваться столько раз, сколько у нас объектов внутри массива, который придет с сервера\n            }); // плюс добавляем класс родителя, куда мы все это помещаем\n        });\n\n        // другой варинт решения, создание прямо на странце без обращения к классам\n    // getResource('http://localhost:3000/menu')\n    //     .then(data => createCard(data));\n\n    // function createCard(data){ // данные от сервера, \n    //     data.forEach(({img,altimg, title, descr, price}) => { // деструктурируем объект на отдельные свойства\n    //         const element = document.createElement('div');\n\n    //         element.classList.add('menu__item');\n\n    //         element.innerHTML = `\n    //         <img src=${img} alt=${altimg}>\n    //         <h3 class=\"menu__item-subtitle\">${title}</h3>\n    //         <div class=\"menu__item-descr\">${descr}</div>\n    //         <div class=\"menu__item-divider\"></div>\n    //         <div class=\"menu__item-price\">\n    //             <div class=\"menu__item-cost\">Цена:</div>\n    //             <div class=\"menu__item-total\"><span>${price}</span> грн/день</div>\n    //         </div>\n    //         `;\n\n    //         document.querySelector('.menu .container').append(element);\n    //     });\n    // }\n\n\n        // class MenuCreator {\n    //     constructor(img, title, description, price, ...classes) { // записываем свойства\n    //         this.img = img;\n    //         this.title = title;\n    //         this.description = description;\n    //         this.price = price;\n    //         this.classes = classes; // будет передан массив классов\n    //         this.transfer = 27;\n    //         // this.parent = document.querySelector(parentSelector); образаемся к слектору родителя, чтобы привезать к нему элкмент\n    //         this.changeToUAH(); // вызываем созданный метод для моментальной конвертации валюты\n    //     }\n    //     changeToUAH() {\n    //         this.price = this.price * this.transfer;\n    //     }\n    //     createMenu() {\n    //         const element = document.createElement('div');\n    //         element.classList.add('menu__item');\n    //         const img = document.createElement('img');\n    //         img.src = this.img;\n    //         const title = document.createElement('h3');\n    //         title.classList.add('menu__item-subtitle');\n    //         const descrip = document.createElement('div');\n    //         descrip.classList.add('menu__item-descr');\n    //         const divide = document.createElement('div');\n    //         divide.classList.add('menu__item-divider');\n    //         const price = document.createElement('div');\n    //         price.classList.add('menu__item-price');\n    //         const cost = document.createElement('div');\n    //         cost.classList.add('menu__item-cost');\n    //         const total = document.createElement('div');\n    //         total.classList.add('menu__item-total');\n    //         const currency = document.createElement('span');\n    //         element.appendChild(img);\n    //         element.appendChild(title);\n    //         element.appendChild(descrip);\n    //         element.appendChild(divide);\n    //         element.appendChild(price);\n    //         price.appendChild(cost);\n    //         price.appendChild(total);\n    //         total.appendChild(currency);\n    //         title.innerHTML = this.title;\n    //         descrip.innerHTML = this.description;\n    //         currency.innerHTML = this.price + ' грн/дн';\n    //         cost.textContent = 'Цена';\n    //         return element;\n    //     }\n    // }\n    // const newItem = new MenuCreator('img/tabs/vegy.jpg', 'Меню Фитнес', 'Меню \"Фитнес\" - это новый подход к приготовлению блюд: больше свежих овощей и фруктов. Продукт активных и здоровых людей. Это абсолютно новый продукт с оптимальной ценой и высоким качеством!', '229');\n    // const newItem2 = new MenuCreator('img/tabs/elite.jpg', 'Меню Премиум', 'В меню “Премиум” мы используем не только красивый дизайн упаковки, но и качественное исполнение блюд. Красная рыба, морепродукты, фрукты - ресторанное меню без похода в ресторан!', '550');\n    // const newItem3 = new MenuCreator('img/tabs/post.jpg', 'Меню Постное', 'Меню “Постное” - это тщательный подбор ингредиентов: полное отсутствие продуктов животного происхождения, молоко из миндаля, овса, кокоса или гречки, правильное количество белков за счет тофу и импортных вегетарианских стейков.', '430');\n    // console.log(newItem.createMenu());\n    // document.querySelector('.menu__field > .container').appendChild(newItem.createMenu()); // потому что несколько контейнеров, поэтому такой синтаксис\n    // document.querySelector('.menu__field > .container').appendChild(newItem2.createMenu());\n    // document.querySelector('.menu__field > .container').appendChild(newItem3.createMenu());\n}\n\nmodule.exports = cards;","function forms(){\n        // Forms\n        const forms = document.querySelectorAll('form');\n\n        const message = {\n            loading: 'img/form/spinner.svg', // указываем путь к картинке\n            success: 'Thank You',\n            failure: 'Something went wrong'\n        };\n        forms.forEach((action) => {\n            bindPostData(action); // подвязываем к каждой форме функцию\n        });\n        // async - внутри функции будет асинхронный код\n        // await - ставим перед теми операциями которые нам необходимо дождаться\n        const postData = async (url, data) => { // передаем адрес и данные для постинга\n            const res = await fetch(url, { // посылаем запрос на сервер,ждем результат, что не принимать пустое поле, из-за асинхронности\n                method: 'POST',\n                headers: {\n                    'Content-type': 'application/json' // прописываем заголовок\n                },\n                body: data\n            });\n    \n            return await res.json(); // вернем уже в формате json, ждем окнца промиса и только тогда возращает из функции\n        }; // отвечает за постинг данных\n    \n    \n    \n        function bindPostData(form) { // отвечает за привязку постинга\n            form.addEventListener('submit', (e) => { // submit срабатывает каждый раз когда мы пытаемся отрпавить какую-то форму, при нажатии энтера или нужной кнопки\n                e.preventDefault(); // чтобы страница постоянно не перегружалась\n    \n                const statusMessage = document.createElement('img'); // создаем картинку загрузки\n                statusMessage.src = message.loading; // создаем изображение и подставляем ему атрибут - путь к картинке\n                statusMessage.style.cssText = `\n                    display: block;\n                    margin : 0 auto;\n                `; // динамически добавляем несколько стилей для загрузки\n                // например сообщение о загрузке, динамически создается еще один блок\n                // form.append(statusMessage); // просто добавляем новый блок к форме\n                form.insertAdjacentElement('afterend', statusMessage); // указываем два аргумента, 1- куда вставляем элемент, 2- то, что нам нужно вставить\n                // спинер будет появляться полсе всех действий в модальном окне\n    \n    \n                // const request = new XMLHttpRequest(); // создаем новый пост запрос\n                // request.open('POST', 'server.php');  // указываем запрос и путь, на который ссылаемся\n                // request.setRequestHeader('Content-type','multipart/form-data'); // указываем тип приходящего контента\n                // request.setRequestHeader('Content-type','application/json'); //для работы с json форматом \n                const formData = new FormData(form); // во внутрь помещаем форму, которой нужно собрать данные\n    \n                // const object = {};\n                // formData.forEach(function(value, key) {\n                //     object[key] = value; // на основании данных formData сформировали объект для работа с json\n                // }); // чтобы можно было использовать конвертацию json\n    \n                const json = JSON.stringify(Object.fromEntries(formData.entries())); // чтобы получить данные с формы в формате маленьких массивов\n                // превращаем эти массивы в обычный объект в формат json\n    \n                postData('http://localhost:3000/requests', json) // теперь из postData вернется промис, который м обработаем\n                    .then(data => { // постим данные на указанный сервер в формате json\n                        console.log(data); // данные - которые возвращаются из промиса, то что вернул сервер\n                        showThanksModal(message.success); // когда обработался успешно запрос, меняем на новое сообщение\n                        // form.reset(); // сбрасываем форму\n                        statusMessage.remove(); // статус мессадж используется только для загрузки, таймаут не нужен \n                    }).catch(() => {\n                        showThanksModal(message.failure); //  в результате ошибки выдаст другое сообщение\n                    }).finally(() => {\n                        form.reset();\n                    });\n    \n    \n                // request.addEventListener('load', () => { // отслеживаем конечную загрузку запроса\n                //     if (request.status === 200) { // если все в порядке\n                //         console.log(request.response);\n                //         showThanksModal(message.success); // когда обработался успешно запрос, меняем на новое сообщение\n                //         form.reset(); // сбрасываем форму\n                //         statusMessage.remove(); // статус мессадж используется только для загрузки, таймаут не нужен\n    \n                //     } else {\n                //         showThanksModal(message.failure);\n                //         form.reset(); // сбрасываем форму\n    \n                //         statusMessage.remove(); // чтобы лишняя инфа исчезла через какое-то время\n    \n                //     }\n    \n                // });\n            });\n        }\n    \n        function showThanksModal(message) {\n            const prevModalDialog = document.querySelector('.modal__dialog');\n            prevModalDialog.classList.add('hide'); // прячем основное модальное окно\n    \n            openModal(); // отвечает за отркытие модальных окон\n    \n            const thanksModal = document.createElement('div'); // создаем новое модальное окно для запроса\n            thanksModal.classList.add('modal__dialog');\n            thanksModal.innerHTML = `\n                <div class='modal__content'>\n                    <div class='modal__close' data-close>×</div>\n                    <div class='modal__title'>${message}</div>\n                </div>\n            `;\n    \n            document.querySelector('.modal').append(thanksModal);\n            setTimeout(() => {\n                thanksModal.remove();\n                prevModalDialog.classList.add('show');\n                prevModalDialog.classList.remove('hide');\n                closeModal(); // закрывает все модальные окна\n            }, 4000); // через 4 секунды модальное окно с ответом на запрос пропадает, а обычное модальное окно с запросом снова добавляется как эелмент\n        }\n    \n        //DOM API - различные методы, которые позволяют работать с элементами на странице- встроенная возможность\n        // у мобильного телефона - доступ к вибрации, к камере и тд.\n        // fetch API - прописываем fetch и с кобках указываем адрес, на который мы будем посылать запрос,\n        // может получится классический гет запрос с данными с указанного адреса\n        // fetch использует промисы\n        // fetch('https://jsonplaceholder.typicode.com/posts', {\n        //     method: 'POST', // устанвливаем нужный метод(запрос)\n        //     body: JSON.stringify({name : 'KIRILL'}), // объект сразу превратиться в json формат и мы его отправим при помощи fetch\n        //     headers: {\n        //         'Content-type' : 'application/json'\n        //     }\n        // })\n        //     .then(response => response.json()) // получаем какой-то response- ответ, в формате json/ команда .json()\n        //     // парсит ответ на нужный нам формат обычного объекта js\n        //     // но эта команда возвращает промис!\n        //     .then(json => console.log(json));\n    \n        fetch('http://localhost:3000/requests')\n            .then(data => data.json()) // берем ответ от сервера превращая в обычный js\n            .then(res => console.log(res));\n    \n    \n}\n\nmodule.exports = forms;","function modalWindow(){\n        // модальное окно\n\n        const open = document.querySelectorAll('[data-modal]'); // для обращения к атрибуту\n        const modal = document.querySelector('.modal');\n    \n    \n        function openModal() {\n            modal.classList.add('show');\n            modal.classList.remove('hide');\n            document.body.style.overflow = 'hidden';\n            clearInterval(modalTimerId); // убираем таймер появление, если кликнули раньше времени\n        }\n    \n        open.forEach(item => {\n            item.addEventListener('click', openModal);\n        });\n        // modal.style.display = 'block'; // показывате элемемент\n        //         modal.classList.add('show');\n        //         modal.classList.remove('hide');\n        //         document.body.style.overflow = 'hidden'; // при открытии модального окна добавиться стиль, не позволяющий прокручивать страницу\n        //     });\n        // }); \n    \n        function closeModal() {\n            modal.classList.add('hide');\n            modal.classList.remove('show');\n            document.body.style.overflow = '';\n        }\n    \n        // modal.style.display = 'none';\n        // modal.classList.add('hide');\n        // modal.classList.remove('show');\n        // document.body.style.overflow = ''; // позволяет снова прокручивать страницу\n    \n        modal.addEventListener('click', (e) => { // обязательно следует передать событие\n            if (e.target === modal || e.target.getAttribute('data-close') == '') { // e.taget - то , куда кликнул пользователь, отслеживает\n                closeModal();\n            }\n        });\n    \n        document.addEventListener('keydown', (e) => {\n            if (e.code === 'Escape' && modal.classList.contains('show')) { // и если модальное окно открыто\n                closeModal();\n            } // отслеживает код кнопки на клавиатуре, которую мы нажимаем\n        });\n    \n        const modalTimerId = setTimeout(openModal, 15000); // через 15 секунд появится модальное окно\n    \n        function showModalByScroll() {\n            if (window.pageYOffset + document.documentElement.clientHeight >=\n                document.documentElement.scrollHeight) {\n                openModal();\n                window.removeEventListener('scroll', showModalByScroll); // после того, как вылезло окно после \n                // скролла, удаляем событие, которое мы повесили \n                // прокрученную часть складываем с видимой \n                // частью страницы на данный момент без прокрутки и если она больше или равна общему размеру страницы,\n                // значит пользователь долистал до конца\n            }\n        }\n    \n        window.addEventListener('scroll', showModalByScroll); // вешаем на окно разработчик событий\n    \n        const itemsToDelete = document.querySelectorAll('.menu__item');\n    \n        itemsToDelete.forEach(item => {\n            item.remove();\n        });\n}\n\nmodule.exports = modalWindow;","function slider(){\n        // slider\n        const slidePrev = document.querySelector('.offer__slider-prev');\n        const slideNext = document.querySelector('.offer__slider-next');\n        const slides = document.querySelectorAll('.offer__slide');\n        const currentNumber = document.querySelector('#current');\n        const totalNumber = document.querySelector('#total');\n    \n    \n        function hideSlides() {\n            slides.forEach(item => {\n                item.classList.add('hide');\n                item.classList.remove('show', 'fade');\n            });\n        }\n    \n        let currentSlide = 0; // какой слайд сейчас выбран\n    \n        function showSlide(i = 0) {\n            slides[i].classList.add('show', 'fade');\n            slides[i].classList.remove('hide');\n    \n            if (slides.length < 10){\n                currentNumber.textContent = `0${currentSlide+1}`;\n                totalNumber.textContent = `0${slides.length}`;\n            } else {\n                currentNumber.textContent = currentSlide+1;\n                totalNumber.textContent = slides.length;\n            }\n    \n        }\n    \n        hideSlides();\n        showSlide();\n    \n    \n        // let currentSlide = 0; // какой слайд сейчас выбран\n        slideNext.addEventListener('click', function () {\n            hideSlides();\n            currentSlide = currentSlide === slides.length - 1 ? 0 : currentSlide + 1;// из кол-ва слайдов вычитаем один и по невыполнению условия показываем следующий\n            // либо показываем самый первый, если условие истинно\n            showSlide(currentSlide);\n    \n            dots.forEach(dot => dot.style.opacity = '.5'); // изначально у всех кнопок 50% прозрачности\n            dots[currentSlide].style.opacity = 1; // текущая кнопка выделяется более четко, чем остальные\n        });\n    \n        slidePrev.addEventListener('click', function() {\n            hideSlides();\n            currentSlide = currentSlide === 0 ? 3 : currentSlide -1  ;\n            showSlide(currentSlide);\n    \n            dots.forEach(dot => dot.style.opacity = '.5'); // изначально у всех кнопок 50% прозрачности\n            dots[currentSlide].style.opacity = 1; // текущая кнопка выделяется более четко, чем остальные\n        });\n\n        // points \n        const offerSlider = document.querySelector('.offer__slider');\n\n        offerSlider.style.position = 'relative'; // все элементы внутри салйдера будут нормально отображаться\n    \n        const carousel = document.createElement('ol'); // создаем упорядоченный список\n        \n        const dots = [];\n         // создаем массив для всех кнопок, для указания класса активности\n    \n        carousel.classList.add('carousel-indicators');\n    \n        offerSlider.append(carousel);\n    \n        for (let i = 0; i < slides.length; i ++){ // создаем определенное кол-во точек\n            const dot = document.createElement('li'); // list item\n            dot.setAttribute('data-slide-to', i + 1); // устанавливаем определенный атрибут\n            // каждой точке устанавливается атрибут data-slide-to и устанавливаем нумерацию, начиная с 1\n            dot.classList.add('dot');\n            \n            \n            if (i == 0){\n                dot.style.opacity = 1; // непрозрачная кнопка\n            }\n    \n            carousel.append(dot);\n            dots.push(dot); // помещаем кнопку в наш массив\n        }\n    \n        dots.forEach(dot => {\n            dot.addEventListener('click', (e) => {\n                const slideTo = e.target.getAttribute('data-slide-to'); // тот элемени, на который нажали, проверяем атрибут\n                \n                currentSlide = slideTo-1; // текущий слайд становится тем, на которую кнопку мы нажали\n                // -1 так как индексы начинаютс я с 0 , а не с 1\n                hideSlides();\n                showSlide(currentSlide);\n                dots.forEach(dot => dot.style.opacity = '.5'); // изначально у всех кнопок 50% прозрачности\n                dots[currentSlide].style.opacity = 1; // текущая кнопка выделяется более четко, чем остальные\n            });\n        });\n}\n\nmodule.exports = slider;","function tabs() {\n        // tabs\n        const tabs = document.querySelectorAll('.tabheader__item'); // берем все кнопки\n        const tabsContent = document.querySelectorAll('.tabcontent'); // берем все элементы котента\n        const tabsParent = document.querySelector('.tabheader__items'); // получаем родителя всех кнопок\\\n    \n        function hideTabContent() {\n            tabsContent.forEach(item => {\n                // item.style.display = 'none'; // функция занимается скрытием табов none - убирает контент\n                item.classList.add('hide'); // убираем контент при помощи класса hide, добавляя его всем элементам\n                item.classList.remove('show', 'fade'); // удаляем класс, который показывает контент у всех элементов\n            });\n    \n            tabs.forEach(item => {\n                item.classList.remove('tabheader__item_active'); // убираем у всех кнопок класс активности\n            });\n        }\n    \n        function showTabContent(i = 0) { // если функция вызывается без аргумента, по умолчанию будет передаваться первый эелмент\n            // tabsContent[i].style.display = 'block'; //  показывает элемент по индексу, который мы вводим block показывает элемент\n            tabsContent[i].classList.add('show', 'fade'); // показываем контент при помощи класса, который добавляется конкретному элементу\n            tabsContent[i].classList.remove('hide'); // удаляем класс hide у конкретного элемента\n            tabs[i].classList.add('tabheader__item_active'); // добавляем активность конкретной кнопке, на которую нажали\n        }\n    \n        hideTabContent();\n        showTabContent();\n    \n        tabsParent.addEventListener('click', (event) => { // обязательно передаем объект события\n            const target = event.target;\n            // target - элемент, в который мы кликнули\n            if (target && target.classList.contains('tabheader__item')) {\n                tabs.forEach((item, i) => {\n                    if (target == item) {\n                        hideTabContent();\n                        showTabContent(i);\n                    }\n                });\n            }\n        });\n}\n\nmodule.exports = tabs; // просто экспортируем нашу функцию с табами","function timer(){\n    // timer\n    const deadline = '2021-12-19';\n\n    function getTimeRemaining(endtime) {\n        const t = Date.parse(endtime) - Date.parse(new Date()); // здесь получим кол-во миллисекунд, разницу, которая осталась до дедлайна\n        const days = Math.floor(t / (1000 * 60 * 60 * 24)); // находим кол-во дней до дедлайна, округляя число\n        const hours = Math.floor((t / 1000 * 60 * 60) % 24); // общее кол-во часов делим на 24 часа и получаем остаток , \n        // которого не хватает до полных суток\n        const minutes = Math.floor((t / 1000 / 60) % 60); // общее кол-во минут делим на 60 минут и получаем остаток\n        const seconds = Math.floor((t / 1000) % 60);\n\n        return { // создаем объект и возвращаем его из функции\n            'total': t,\n            'days': days,\n            'hours': hours,\n            'minutes': minutes,\n            'seconds': seconds\n        };\n    }\n\n    function getZero(num) {\n        if (num >= 0 && num < 10) {\n            return `0${num}`;\n        } else {\n            return num; // будет добавлять ноль к числу, если оно меньше 10\n        }\n    }\n\n    function setClock(selector, endtime) { // принимает селектор и время дедлайна\n        const timer = document.querySelector(selector);\n        const days = timer.querySelector('#days');\n        const hours = timer.querySelector('#hours');\n        const minutes = timer.querySelector('#minutes');\n        const seconds = timer.querySelector('#seconds');\n\n        const timeInterval = setInterval(updateClock, 1000);\n\n        updateClock(); // вызываем первый раз функцию заранее, чтобы не было моргания времени\n\n        function updateClock() {\n            const t = getTimeRemaining(endtime);\n\n            days.innerHTML = getZero(t.days); // получив объект с разными свойствами обращаемся к каждому свойству объекта поочередно\n            // также записывая это свойство в переменную на странице\n            hours.innerHTML = getZero(t.hours);\n            minutes.innerHTML = getZero(t.minutes);\n            seconds.innerHTML = getZero(t.seconds);\n\n            if (t.total <= 0) {\n                clearInterval(timeInterval); // если время уже вышло, то остановить таймер\n            }\n        }\n    }\n    setClock('.timer', deadline);\n}\n\nmodule.exports = timer;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","'use strict';\n\n// const { create } = require(\"json-server\");\n\ndocument.addEventListener('DOMContentLoaded', () => {\n\n    const tabs = require('./modules/tabs'); // указываем путь к файлу табов\n    // не ставим js, так как webpack сам знает, как собирать файлы\n    const modalWindow = require('./modules/modalWindow');\n    const timer = require('./modules/timer');\n    const slider = require('./modules/slider');\n    const forms = require('./modules/forms');\n    const cards = require('./modules/cards');\n    const calculator = require('./modules/calculator');\n\n    // далее просто вызываем переменные как самые обычные функции\n    tabs();\n    modalWindow();\n    timer();\n    slider();\n    forms();\n    cards();\n    calculator();\n}); // порядок подключения не важен, главное чтобы совпадало название модулей с названиями файлов, котоырй мы подключаем\n// style.display - Многоцелевое свойство, которое определяет, как элемент должен быть показан в документе"],"sourceRoot":""}